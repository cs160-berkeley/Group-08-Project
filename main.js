/* *     Copyright (C) 2010-2016 Marvell International Ltd. *     Copyright (C) 2002-2010 Kinoma, Inc. * *     Licensed under the Apache License, Version 2.0 (the "License"); *     you may not use this file except in compliance with the License. *     You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * *     Unless required by applicable law or agreed to in writing, software *     distributed under the License is distributed on an "AS IS" BASIS, *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *     See the License for the specific language governing permissions and *     limitations under the License. */import Pins from "pins";import {VerticalScroller} from "scroller"; 
import {scents, group4, tempIntensityLabel, tempTimeLabel} from "scentstate";// TODO This is not the best scroller, it works but it covers up the header bar// Consider finding a better scroller if we need it (I'm not sure we do)// Scroller is only necessary for the calendar I believe let basicTextStyle = new Style({ font: "24px Brandon Grotesque", color: "black" });let largerTextStyle = new Style({ font: "30px Brandon Grotesque", color: "white" });let headerTextStyle = new Style({ font: "bold 50px Brandon Grotesque", color: "white"});let headerSymbolStyle = new Style({ font: "bold italic 30px Brandon Grotesque", color: "white"});let elemTextStyle = new Style({ font: "14px Brandon Grotesque", color: "#3c4241"});let elemLinkStyle = new Style({ font: "italic 14px Brandon Grotesque", color: "#007aff"}); //this is the apple Link colorlet mainTextStyle = new Style({ font: "bold italic 80px Brandon Grotesque", color: "white"});let backgroundGray = new Skin({fill: "#FFFFFF"}) //default apple background color #efeff4let scentText = new Style({ font: "24px Brandon Grotesque", color: "white" });
let scentTextStyle = new Style({ font: "10px Brandon Grotesque", color: "white"}); var currentScent = "";
var currentScentString = "";let selectedCalendarCell;

//Theme Colors
let orange = new Skin({fill: "#ff9900"});
let lgreen = new Skin({fill: "#86BD3E"});
var lblue = new Skin({fill: "#66AEF2"});
let yellow = new Skin({fill: "#DFA20A"});
let dgreen = new Skin({fill: "#335115"});
let dblue = new Skin({fill: "#0254B6"});var pinkBorderSkin = new Skin({    fill: "#f7b7d2",     borders: {left: 3, right: 3, top: 5, bottom: 5},     stroke: "black"}); let currentScreen;let screenStack = new Array();let hasConnectedDevice = 0; let mainMainContainer = new Container({    top:0,left:0,right:0,bottom:0}); let MainContainer = Column.template($ => ({    top: 0, bottom: 0, left: 0, right: 0,    skin: backgroundGray,    contents: [        new header({left:"<", right:"+", title:"Aromafy home", touchRightFxn: nullFxn}),    ],})); let HomeScreen = Column.template( $ => ({    top:0,bottom:0,left:0,right:0,    skin: backgroundGray,    contents: [        new header({left: " ", right:"", title:"Aromafy", touchRightFxn: nullFxn}),        new Label({            string: "Welcome Home",            top:40, left: 0, right: 0,            height:40,            style: new Style({ font: "60px Brandon Grotesque", color: "#66AEF2" }),            horizontal: "center"        }),        new Label({            string: "Connect your device",            active:true,            top:40, width: 260, height: 40,            horizontal: "center",
            skin: lgreen,            style: largerTextStyle,            behavior: Behavior({                onTouchEnded(content, id,x,y,ticks) {                    transition(connectScreen);                }            })        }),        new Label({            string: "Create/Manage Schedules",            active:true,            top:15, width: 260, height: 40,            style: largerTextStyle,
            skin: lgreen,            horizontal: "center",            behavior: Behavior({                onTouchEnded(content, id,x,y,ticks) {                    //calendarScreen = new scheduleTemp();                    transition(calendarScreen);                }            })        }),        new Label({            string: "Current Scent State",            active:true,            top:15, width: 260, height: 40,            horizontal: "center",
            skin: lgreen,            style: largerTextStyle,            behavior: Behavior({                onTouchEnded(content, id,x,y,ticks) {                    transition(currentStateScreen);                }            })        })/*,        new Label({            string: "Create a Scent",            active:true,            top:15, width: 260, height: 40,            style: largerTextStyle,            horizontal: "center",
            skin: lgreen,            behavior: Behavior({                onTouchEnded(content, id,x,y,ticks) {                    transition(newScentScreen);                }            })        })*/    ]})) let IntroScreen = Container.template($ => ({    top:0, bottom:0,left:0,right:0,    contents: [
		new Picture({          height:675,           url: 'http://weneedfun.com/wp-content/uploads/2016/01/Blue-Flower-13.jpg'         }),
          new Label({string: "Aromafy", style: mainTextStyle, bottom: 80, height:120}),
          getStartedButton    ]})); //TODO This make this look goodlet getStartedButton = new Container({    bottom:60, //TODO Might need to add other constraints    width:150,height:30,    skin: new Skin({fill: "white"}),    active:true,    contents: [        new Label({string: "Get Started", style: basicTextStyle})    ],    behavior: Behavior({        onTouchEnded(content,id,x,y,ticks) {            //TODO transition to home here            //removeIntroScreen();            mmc.remove(is);
            if (!hasConnectedDevice) {
            	mmc.add(connectScreen);
            	currentScreen = connectScreen;
            } else {
            	mmc.add(calendarScreen);
            	currentScreen = calendarScreen;
            }        }    })})  let header = Line.template($ => ({    top:0, left:0, right:0, height:50,    skin: dblue, //Apple safari skin, videos use #5ac8fa    contents: [        new Container({            top:0,left:0,right:0,bottom:0,            contents: [            new Label({                string: $.left,                style: headerSymbolStyle,                horizontal: "left",                active:true,                behavior: Behavior({                    onTouchEnded(content,id,x,y,ticks) {                        //TODO what to do when left header clicked                        goBack()                    }                })            }),            ]        }),        new Container({            top:0,left:0,right:0,bottom:0,            name: "title",            contents: [            new Label({                string: $.title,                style: headerTextStyle,             }),            ]        }),        new Container({            top:0,left:0,right:0,bottom:0,            contents: [            new Label({                string: $.right,                style: headerSymbolStyle,                horizontal: "right",                active:true,                behavior: Behavior({                    onTouchEnded(content,id,x,y,ticks) {                        //TODO what to do when right header clicked                        if ($.touchRightFxn) {                            $.touchRightFxn()                        }                    }                })            }),            ]        })    ]})); let deviceEntry = Column.template($ => ({    top:0,bottom:10, left:5,right:0,    width:200,    contents: [        new Label({string: $.name, style: basicTextStyle, left:0}),        new Label({string: $.dist + "ft from you", style: elemTextStyle,left:10}),        new Label({string: $.status, style: elemTextStyle,left:10})    ]})); let connectedMenu = new Container({    name: "connectedMenu",    top: 40,    height: 30, width: 200,    skin: lgreen,    active:true,    contents: [        new Label({ style: basicTextStyle, string: "John's Aroma Dispenser"})    ],    behavior: Behavior ({        onTouchEnded(content,id,x,y,ticks) {            content.container.container.remove(yourDevice);            content.container.add(expandedConnectMenu);            content.container.container.add(yourDevice);            content.container.remove(content);        }    })}) let yourDevice = new Column({    bottom: 20,    left:0, right: 0,    contents: [        new Label({string: "Your Device", style: largerTextStyle}),        new Line({            top:0,bottom:0,left:10,right:0,            contents: [                new Picture({                     height:120,width:120,                    url: 'http://cdn.pocket-lint.com/r/c/742x526/assets/images/phpadneab.jpg'                }),                new Column({                    top:10,left:0,right:0,bottom:0,                    contents: [                        new Label({string: "John's Aroma Dispenser", style: elemTextStyle,left:10}),                        new Label({string: "Currently connected", style: elemTextStyle,left:10}),                        new Label({string: "Currently relseasing scent:", left:10, style: elemTextStyle}),                        new Label({string: "After the rain, until 5:30pm", left:20, style: elemTextStyle}),                    ]                })            ]        }),
        new Label({string: "Next", style: basicTextStyle, active: true, bottom: 0, left: 0, right: 0,
        behavior: Behavior({
            onTouchEnded(content,id,x,y,ticks) {            mmc.remove(currentScreen);
            mmc.add(calendarScreen);
            currentScreen = calendarScreen;
           }
       })
       })    ]}) let expandedConnectMenu = new Column({    name: "expandedConnectMenu",    top: 40,    width: 200,    skin: lblue,    active:true,    contents: [        new deviceEntry({name: "John's Aroma dispenser", dist:60, status: "Remembered"}),        new deviceEntry({name: "Neighbor's Aroma dispenser", dist: 200, status: "Password protected"})    ],    behavior: Behavior ({        onTouchEnded(content,id,x,y,ticks) {            if (hasConnectedDevice) {                content.container.container.remove(yourDevice);            }            content.container.add(connectedMenu);            content.container.container.add(yourDevice);            content.container.remove(content);            hasConnectedDevice = 1;        }    })}) let ConnectScreen = Column.template( $ => ({    top:0,bottom:0,left:0,right:0,    skin: backgroundGray,    contents: [        new header({left:"", right:"", title:"Device Connect", touchRightFxn: nullFxn}),        new Label({            string: "Device link",            top:20,            height:40,            style: new Style({ font: "34px", color: "black" }),            horizontal: "center"        }),        new Container({            name: "connectMenu",            top: 40,            height: 30, width: 200,            skin: lblue,            active:true,            contents: [                new Label({ style: basicTextStyle, string: "Select Device         v"})            ],            behavior: Behavior ({                onTouchEnded(content,id,x,y,ticks) {                    content.container.add(expandedConnectMenu);                    content.container.remove(content);                }            })        })     ]})); //create a label with label = new lbl({str: "some string", style: someStyle, touchFxn: uncalledFxn (if any)}) // Also include params to the touch function in the label paramslet lbl = Label.template($ => ({    left:10,    string: $.str,    style: $.style,    active: true,    behavior: Behavior({        onTouchEnded(content, id, x,y,ticks) {            $.touchFxn($)        }    })})); function nullFxn() {    //do nothing} //TODO generally customize this modal window (size, position, message, style)let Modal = Column.template($ => ({    bottom: 200,//TODO change this value as desired    skin: new Skin({fill:"white"}),    contents: [        new Container({            height:50, width:200, //TODO change values            skin: new Skin({fill:"white"}),            contents: [                new Label({string: $.string, style: basicTextStyle}),             ]        }),        new Line({            height:40,width:200, //TODO change values            skin: lblue,            active: true,            contents: [                new Label({string: "Okay!", style: headerTextStyle, left:0,right:0})                //TODO change this string            ],            behavior: Behavior({                onTouchEnded(content,id,x,y,ticks) {                    //TODO what to do when bar at bottom of modal is clicked                }            })        }),    ]})); function transition(destination) {    screenStack.push(currentScreen);    mmc.remove(currentScreen);    mmc.add(destination);    currentScreen = destination;} function goBack() {    if (currentScreen == currentStateScreen){        application.remove(tempTimeLabel);        application.remove(tempIntensityLabel);    }    mmc.remove(currentScreen);    currentScreen = screenStack.pop();    if (!currentScreen) {        currentScreen = hs;    }    mmc.add(currentScreen);    //scheduleItem.skin=pinkBorderSkin;} let mmc = mainMainContainer;let mc = new MainContainer({});let is = new IntroScreen({});let hs = new HomeScreen({});let connectScreen = new ConnectScreen({});let currentStateScreen = new MainContainer({});let calendarScreen = new MainContainer({});let newScentScreen = new MainContainer({}); application.add(mmc);mmc.add(is)currentScreen = is;let isCurrentScent = 0;let currentColor = whiteBorderSkin;let saveSkin = orange;function returnToCal() {    selectedCalendarCell.skin = new Skin({        fill: currentColor,        borders: {left: 3, right: 3, top: 5, bottom: 5},        stroke: "black"    })//currentColor;    goBack();}     // schedule of the devicevar greenSkin = new Skin({fill: "green"});var redSkin = new Skin({fill: "red"});var blueSkin = new Skin({fill: "blue"});var whiteBorderSkin = new Skin({    fill: "white",     borders: {left: 3, right: 3, top: 5, bottom: 5},     stroke: "black"});   var scheduleItem = Container.template($ => ({active: true, left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin,                     behavior: Behavior({                        onTouchEnded(content, id,x,y,ticks) {                            transition(currentStateScreen);                            selectedCalendarCell = content;                        }                    })                }))var scheduleItem2 = new Container({active: true, left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin,                     behavior: Behavior({                        onTouchEnded(content, id,x,y,ticks) {                            transition(currentStateScreen);                            selectedCalendarCell = content;                        }                    })                })                 let scheduleColumn = new Column({    left: 60, right: 60, top: 50, bottom:50,    skin: lblue,    contents: [        new Line({height:30,              contents: [                new Label({string: "  Mon   ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),                new Label({string: "  Tue   ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),                new Label({string: "  Wed   ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),                new Label({string: "  Thu   ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),                new Label({string: "  Fri   ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),                new Label({string: "  Sat   ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),                new Label({string: "  Sun  ", style: new Style({ font: "16.5 Brandon Grotesque", color: "black" }),horizontal: "center"}),            ]        }),                 new Line({left: 0, right: 0, top: 0, bottom: 0, //skin: pink,            contents: [                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                // scheduleItem2,                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),            ]        }),                new Line({left: 0, right: 0, top: 0, bottom: 0, //skin: pinkBorderSkin,             contents: [                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),            ]        }),                new Line({left: 0, right: 0, top: 0, bottom: 0, //skin: whiteBorderSkin,            contents: [                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),            ]        }),                           new Line({left: 0, right: 0, top: 0, bottom: 0, //skin: pinkBorderSkin,             contents: [                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                new scheduleItem({}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),                // new Content({left: 0, right: 0, top: 0, bottom: 0, skin: whiteBorderSkin}),            ]        }),     ]});let labelHeight = 22;let timeColumn = new Column({    left: 20, top: 85, width:40,    contents: [        new Label({string: "12am", style: basicTextStyle, height:labelHeight}),        new Label({string: "1am", style: basicTextStyle, height:labelHeight}),        new Label({string: "2am", style: basicTextStyle, height:labelHeight}),        new Label({string: "3am", style: basicTextStyle, height:labelHeight}),        new Label({string: "4am", style: basicTextStyle, height:labelHeight}),        new Label({string: "5am", style: basicTextStyle, height:labelHeight}),        new Label({string: "6am", style: basicTextStyle, height:labelHeight}),        new Label({string: "7am", style: basicTextStyle, height:labelHeight}),        new Label({string: "8am", style: basicTextStyle, height:labelHeight}),        new Label({string: "9am", style: basicTextStyle, height:labelHeight}),        new Label({string: "10am", style: basicTextStyle, height:labelHeight}),        new Label({string: "11am", style: basicTextStyle, height:labelHeight}),        new Label({string: "12pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "1pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "2pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "3pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "4pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "5pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "6pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "7pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "8pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "9pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "10pm", style: basicTextStyle, height:labelHeight}),        new Label({string: "11pm", style: basicTextStyle, height:labelHeight}),            ]}) //application.add(group4);currentStateScreen = new Container({    top:0,bottom:0,left:0,right:0,    skin: backgroundGray,    contents: [        new header({left:"<", right:"", title:"Current Scent State", touchRightFxn: returnToCal}),        group4,        scents    ]}); calendarScreen = new Container({    top:0,bottom:0,left:0,right:0,    skin: backgroundGray,    contents: [        new header({left:"", right:"", title:"Schedules", touchRightFxn: nullFxn}),        scheduleColumn,        timeColumn    ]}); newScentScreen = new Container({    top:0,bottom:0,left:0,right:0,    skin: backgroundGray,    contents: [        new header({left:"", right:"", title:"New Scent", touchRightFxn: nullFxn})    ]});

Handler.bind("/discover", Behavior({    onInvoke: function(handler, message){        trace("Found the device.\n"); 
        var discovery = JSON.parse(message.requestText);
        deviceURL = discovery.url;
        handler.invoke(new Message(discovery.url + "respond"), Message.TEXT);    },
    onComplete: function(handler, message, text){
    	trace("Response was: " + text + "\n");
    }}));

var ApplicationBehavior = Behavior.template({
	onDisplayed: function(application) {
    	application.discover("device.device.app");
    	
    	 let discoveryInstance = Pins.discover(            connectionDesc => {                if (connectionDesc.name == "device.device.app") {                    trace("Connecting to remote pins\n");                    remotePins = Pins.connect(connectionDesc);                }            },             connectionDesc => {                if (connectionDesc.name == "app") {                    trace("Disconnected from remote pins\n");                    remotePins = undefined;                }            }        );

    },
    onQuit: function(application) {
        application.forget("device.device.app");
    }
});application.behavior = new ApplicationBehavior();